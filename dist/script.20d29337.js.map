{"version":3,"sources":["script.js"],"names":["Workout","coords","distance","duration","del","Date","now","slice","description","type","toUpperCase","months","date","getMonth","getDate","clicks","Runnning","cadence","calcPace","_setDescription","pace","Cycling","elevationGain","speed","calcSpeed","form","document","querySelector","containerWorkouts","inputType","inputDistance","inputDuration","inputCadence","inputElevation","btnReset","App","_getPosition","_getLocalStorage","addEventListener","_newWorkout","bind","_toggleElevationField","_moveToPopup","_reset","_delete","console","log","closest","findIndex","el","id","navigator","geolocation","getCurrentPosition","_loadMap","alert","position","latitude","longitude","L","map","setView","tileLayer","attribution","addTo","on","_showForm","forEach","work","renderWorkoutMarker","mapE","classList","remove","focus","value","style","display","add","setTimeout","toggle","e","preventDefault","validInputs","workout","inputs","every","inp","Number","isFinite","allInputsPositive","latlng","lat","lng","elevation","push","_renderWorkout","_hideForm","_setLocalStorage","marker","bindPopup","popup","maxWidth","minWidth","autoClose","closeOnClick","className","setPopupContent","openPopup","html","toFixed","insertAdjacentHTML","workoutEl","target","find","dataset","animate","pan","localStorage","setItem","JSON","stringify","data","parse","getItem","removeItem","location","reload","app"],"mappings":"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","file":"script.20d29337.js","sourceRoot":"..","sourcesContent":["'use strict';\n\nclass Workout {\n  date = new Date();\n\n  id = (Date.now() + '').slice(-10);\n  save = true;\n  constructor(coords, distance, duration, del = false) {\n    this.coords = coords; // [latitude, longitude]\n    this.distance = distance; // in km\n    this.duration = duration; // in mins\n    this.del = del;\n  }\n\n  clicks = 0;\n  _setDescription() {\n    // prettier-ignore\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\n    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)} on ${\n      months[this.date.getMonth()]\n    } ${this.date.getDate()}`;\n  }\n\n  click() {\n    this.clicks++;\n  }\n}\n\n// ---------------------- Child Class : Running\n\nclass Runnning extends Workout {\n  type = 'running';\n\n  constructor(coords, distance, duration, cadence) {\n    super(coords, distance, duration);\n    this.cadence = cadence;\n    //this.type = 'running'\n    this.calcPace();\n    this._setDescription();\n  }\n\n  calcPace() {\n    // min /km\n\n    this.pace = this.duration / this.distance;\n\n    return this.pace;\n  }\n}\n// ---------------------- Child Class : Cycling\nclass Cycling extends Workout {\n  type = 'cycling';\n\n  constructor(coords, distance, duration, elevationGain, speed) {\n    super(coords, distance, duration);\n    this.elevationGain = elevationGain;\n    // this.type = 'cycling'\n    this.calcSpeed();\n    this._setDescription();\n  }\n\n  calcSpeed() {\n    // km/h\n    this.speed = this.distance / (this.duration / 60); // convert to hour from min\n    return this.speed;\n  }\n}\n\n///////////////////////////////////  APPLICATION ARCHITECTURE\n\n// let map, mapEvent;\n\nconst form = document.querySelector('.form');\nconst containerWorkouts = document.querySelector('.workouts');\nconst inputType = document.querySelector('.form__input--type');\nconst inputDistance = document.querySelector('.form__input--distance');\nconst inputDuration = document.querySelector('.form__input--duration');\nconst inputCadence = document.querySelector('.form__input--cadence');\nconst inputElevation = document.querySelector('.form__input--elevation');\n\nconst btnReset = document.querySelector('.btn__reset');\n\n// ---------------------- App Class - contains all the functionality of our App\nclass App {\n  //------------------------------ Class Fields\n\n  #map;\n  #mapZoomLevel = 13;\n  #mapEvent;\n  #workouts = [];\n\n  //------------------------------ Contructors\n  constructor() {\n    this._getPosition();\n\n    this._getLocalStorage();\n\n    form.addEventListener('submit', this._newWorkout.bind(this));\n\n    inputType.addEventListener('change', this._toggleElevationField);\n\n    containerWorkouts.addEventListener('click', this._moveToPopup.bind(this));\n\n    btnReset.addEventListener('click', this._reset);\n\n    containerWorkouts.addEventListener('click', this._delete.bind(this));\n  }\n  /////////////////////////////////////\n\n  _select() {\n    console.log(containerWorkouts.closest('btn__delete'));\n    const index = this.#workouts.findIndex(el => console.log(el.id));\n    // this.#workouts.splice(index, 1);\n  }\n\n  ////////////////////////////////////\n  //------------------------------ App methods\n  _getPosition() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        this._loadMap.bind(this),\n\n        function () {\n          alert('Coud not get your location');\n        }\n      );\n    }\n  }\n\n  _loadMap(position) {\n    {\n      const { latitude } = position.coords;\n      const { longitude } = position.coords;\n\n      console.log(`https://www.google.com/maps/@${latitude},${longitude}`);\n\n      const coords = [latitude, longitude];\n\n      this.#map = L.map('map').setView(coords, this.#mapZoomLevel);\n\n      L.tileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n        attribution:\n          '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors',\n      }).addTo(this.#map);\n\n      this.#map.on('click', this._showForm.bind(this));\n    }\n\n    this.#workouts.forEach(work => {\n      this.renderWorkoutMarker(work);\n    });\n  }\n\n  _showForm(mapE) {\n    this.#mapEvent = mapE;\n    form.classList.remove('hidden');\n\n    inputDistance.focus();\n  }\n\n  _hideForm() {\n    inputDistance.value = inputDuration.value = inputCadence.value = inputElevation.value =\n      '';\n\n    form.style.display = 'none';\n    form.classList.add('hidden');\n    setTimeout(() => (form.style.display = 'grid'), 1000);\n    // to focus on distance input\n    inputDistance.focus();\n  }\n\n  _toggleElevationField() {\n    inputElevation.closest('.form__row').classList.toggle('form__row--hidden');\n    inputCadence.closest('.form__row').classList.toggle('form__row--hidden');\n  }\n\n  _newWorkout(e) {\n    e.preventDefault();\n\n    const validInputs = (...inputs) =>\n      inputs.every(inp => Number.isFinite(inp));\n\n    const allInputsPositive = (...inputs) => inputs.every(inp => inp > 0);\n\n    const type = inputType.value;\n    const distance = +inputDistance.value;\n    const duration = +inputDuration.value;\n    const { lat, lng } = this.#mapEvent.latlng;\n    let workout;\n\n    if (type === 'running') {\n      const cadence = +inputCadence.value;\n\n      if (\n        !validInputs(distance, duration, cadence) ||\n        !allInputsPositive(distance, duration, cadence)\n      )\n        return alert('Inputs have to be positive numbers!');\n      workout = new Runnning([lat, lng], distance, duration, cadence);\n    }\n\n    if (type === 'cycling') {\n      const elevation = +inputElevation.value;\n      if (\n        !validInputs(distance, duration, elevation) ||\n        !allInputsPositive(distance, duration)\n      )\n        return alert('Inputs have to be positive numbers!');\n\n      workout = new Cycling([lat, lng], distance, duration, elevation);\n    }\n\n    this.#workouts.push(workout);\n    console.log(this.#workouts);\n\n    this.renderWorkoutMarker(workout);\n    console.log(workout);\n\n    this._renderWorkout(workout);\n\n    this._hideForm();\n\n    this._setLocalStorage();\n  }\n\n  renderWorkoutMarker(workout) {\n    L.marker(workout.coords)\n      .addTo(this.#map)\n      .bindPopup(\n        L.popup({\n          maxWidth: 250,\n          minWidth: 100,\n          autoClose: false,\n          closeOnClick: false,\n          className: `${workout.type}-popup`,\n        })\n      )\n      .setPopupContent(\n        `${workout.type === 'running' ? '🏃‍♂' : '🚴‍♀️'} ${workout.description}`\n      )\n      .openPopup();\n  }\n\n  _renderWorkout(workout) {\n    let html = `\n    <li class=\"workout workout--${workout.type}\" data-id=\"${workout.id}\">     \n            <h2 class=\"workout__title\">${workout.description} </h2>\n            <div class=\"workout__details\">\n              <span class=\"workout__icon\">${\n                workout.type === 'running' ? '🏃‍♂' : '🚴‍♀️'\n              }</span>\n              <span class=\"workout__value\">${workout.distance}</span>\n              <span class=\"workout__unit\">km</span>\n            </div>\n            <div class=\"workout__details\">\n              <span class=\"workout__icon\">⏱</span>\n              <span class=\"workout__value\">${workout.duration}</span>\n              <span class=\"workout__unit\">min</span>\n            </div>`;\n\n    if (workout.type === 'running')\n      html += `          \n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.pace.toFixed(1)}</span>\n          <span class=\"workout__unit\">min/km</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">🦶🏼</span>\n          <span class=\"workout__value\">${workout.cadence}</span>\n          <span class=\"workout__unit\">spm</span>\n        </div>\n    </li>`;\n\n    if (workout.type === 'cycling')\n      html += `          \n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⚡️</span>\n          <span class=\"workout__value\">${workout.speed.toFixed(1)}</span>\n          <span class=\"workout__unit\">km/h</span>\n        </div>\n        <div class=\"workout__details\">\n          <span class=\"workout__icon\">⛰</span>\n          <span class=\"workout__value\">${workout.elevationGain}</span>\n          <span class=\"workout__unit\">m</span>\n        </div>\n    </li>`;\n\n    form.insertAdjacentHTML('afterend', html);\n  }\n\n  _moveToPopup(e) {\n    const workoutEl = e.target.closest('.workout');\n    // console.log(workoutEl);\n\n    // Guard Clause\n    if (!workoutEl) return;\n\n    const workout = this.#workouts.find(\n      work => work.id === workoutEl.dataset.id\n    );\n\n    this.#map.setView(workout.coords, this.#mapZoomLevel, {\n      animate: true,\n      pan: {\n        duration: 1,\n      },\n    });\n  }\n\n  _setLocalStorage() {\n    localStorage.setItem('workouts', JSON.stringify(this.#workouts));\n  }\n\n  _getLocalStorage() {\n    const data = JSON.parse(localStorage.getItem('workouts'));\n    console.log(data);\n\n    if (!data) return;\n\n    this.#workouts = data;\n    this.#workouts.forEach(work => {\n      this._renderWorkout(work);\n    });\n  }\n\n  _reset() {\n    localStorage.removeItem('workouts');\n    location.reload();\n  }\n}\n\nconst app = new App();\n"]}